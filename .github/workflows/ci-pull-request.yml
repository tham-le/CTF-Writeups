name: üß™ CI/CD - Pull Request Validation

on:
  pull_request:
    branches: [ main, test-for-ctf-page ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  security-check:
    name: üîí Security & Dependencies Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Don't checkout submodules for security
          submodules: false
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Check for malicious files
        run: |
          echo "üîç Scanning for potentially malicious files..."
          
          # Check for suspicious file extensions
          if find . -name "*.exe" -o -name "*.bat" -o -name "*.ps1" -o -name "*.vbs" | grep -q .; then
            echo "‚ùå Suspicious executable files found!"
            exit 1
          fi
          
          # Check for large files (potential binaries)
          if find . -type f -size +10M | grep -q .; then
            echo "‚ö†Ô∏è Large files detected, reviewing..."
            find . -type f -size +10M -exec ls -lh {} \;
          fi
          
          # Check for hidden malicious patterns
          if grep -r "eval\|exec\|system\|shell_exec" --include="*.js" --include="*.py" --include="*.sh" . | grep -v "node_modules" | grep -q .; then
            echo "‚ö†Ô∏è Potentially dangerous code patterns found - manual review required"
            grep -r "eval\|exec\|system\|shell_exec" --include="*.js" --include="*.py" --include="*.sh" . | grep -v "node_modules" || true
          fi
          
          echo "‚úÖ Security scan completed"

  code-quality:
    name: üéØ Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          pip install PyYAML requests Pillow
          
      - name: Validate YAML files
        run: |
          echo "üîç Validating YAML syntax..."
          python3 -c "
          import yaml
          import sys
          import os
          
          errors = []
          for root, dirs, files in os.walk('.'):
              if 'node_modules' in root or '.git' in root:
                  continue
              for file in files:
                  if file.endswith(('.yml', '.yaml')):
                      filepath = os.path.join(root, file)
                      try:
                          with open(filepath, 'r') as f:
                              yaml.safe_load(f)
                          print(f'‚úÖ {filepath}')
                      except Exception as e:
                          errors.append(f'‚ùå {filepath}: {e}')
          
          if errors:
              for error in errors:
                  print(error)
              sys.exit(1)
          else:
              print('‚úÖ All YAML files are valid')
          "
          
      - name: Validate HTML structure
        run: |
          echo "üîç Checking HTML files..."
          # Check for basic HTML structure issues
          find . -name "*.html" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            if ! grep -q "<!DOCTYPE html>" "$file"; then
              echo "‚ö†Ô∏è Missing DOCTYPE in $file"
            fi
            if ! grep -q "<html" "$file"; then
              echo "‚ö†Ô∏è Missing html tag in $file"
            fi
            echo "‚úÖ Checked $file"
          done
          
      - name: Check JavaScript syntax
        run: |
          echo "üîç Checking JavaScript syntax..."
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            # Basic syntax check using node
            if command -v node >/dev/null 2>&1; then
              if ! node -c "$file" 2>/dev/null; then
                echo "‚ùå Syntax error in $file"
                exit 1
              else
                echo "‚úÖ $file"
              fi
            fi
          done

  build-test:
    name: üèóÔ∏è Build & Integration Tests
    runs-on: ubuntu-latest
    needs: [security-check, code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false  # Don't sync writeups for PRs
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Test CTF Site Build
        run: |
          echo "üèóÔ∏è Testing CTF site build process..."
          
          # Check if required files exist
          if [ ! -f "ctf_site/index.html" ]; then
            echo "‚ùå Missing ctf_site/index.html"
            exit 1
          fi
          
          if [ ! -f "ctf_site/css/style.css" ]; then
            echo "‚ùå Missing ctf_site/css/style.css"
            exit 1
          fi
          
          if [ ! -f "ctf_site/js/main.js" ]; then
            echo "‚ùå Missing ctf_site/js/main.js"
            exit 1
          fi
          
          echo "‚úÖ All required CTF site files present"
          
      - name: Test Flutter App Structure
        run: |
          echo "üèóÔ∏è Testing Flutter app structure..."
          
          if [ -d "ctf_app" ]; then
            if [ ! -f "ctf_app/pubspec.yaml" ]; then
              echo "‚ùå Missing ctf_app/pubspec.yaml"
              exit 1
            fi
            
            if [ ! -f "ctf_app/lib/main.dart" ]; then
              echo "‚ùå Missing ctf_app/lib/main.dart"
              exit 1
            fi
            
            echo "‚úÖ Flutter app structure is valid"
          else
            echo "‚ÑπÔ∏è No Flutter app directory found"
          fi
          
      - name: Test Firebase Configuration
        run: |
          echo "üèóÔ∏è Testing Firebase configuration..."
          
          if [ ! -f "firebase.json" ]; then
            echo "‚ùå Missing firebase.json"
            exit 1
          fi
          
          # Validate firebase.json syntax
          python3 -c "
          import json
          try:
              with open('firebase.json', 'r') as f:
                  config = json.load(f)
              if 'hosting' not in config:
                  print('‚ùå Missing hosting configuration in firebase.json')
                  exit(1)
              print('‚úÖ Firebase configuration is valid')
          except Exception as e:
              print(f'‚ùå Firebase configuration error: {e}')
              exit(1)
          "
          
      - name: Test Workflow Files
        run: |
          echo "üèóÔ∏è Testing workflow files..."
          
          # Check for workflow syntax issues
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read workflow; do
            echo "Checking $workflow..."
            # Workflows are already validated by YAML check above
            echo "‚úÖ $workflow"
          done

  documentation-check:
    name: üìö Documentation & Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check README files
        run: |
          echo "üìö Checking documentation..."
          
          if [ ! -f "README.md" ]; then
            echo "‚ö†Ô∏è Missing main README.md"
          else
            echo "‚úÖ Main README.md exists"
          fi
          
          # Check for basic content in README
          if [ -f "README.md" ]; then
            if ! grep -qi "portfolio\|ctf\|tham" README.md; then
              echo "‚ö†Ô∏è README.md might need more descriptive content"
            fi
          fi
          
      - name: Check for required files
        run: |
          echo "üìã Checking for required portfolio files..."
          
          required_files=(
            "ctf_site/index.html"
            "firebase.json"
            ".firebaserc"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file"
            else
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
          done

  pr-summary:
    name: üìä Pull Request Summary
    runs-on: ubuntu-latest
    needs: [security-check, code-quality, build-test, documentation-check]
    if: always()
    steps:
      - name: PR Validation Summary
        run: |
          echo "## üéØ Pull Request Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîí Security & Dependencies | ${{ needs.security-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üéØ Code Quality & Linting | ${{ needs.code-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY  
          echo "| üèóÔ∏è Build & Integration Tests | ${{ needs.build-test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìö Documentation & Standards | ${{ needs.documentation-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if all jobs passed
          if [[ "${{ needs.security-check.result }}" == "success" && 
                "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.build-test.result }}" == "success" && 
                "${{ needs.documentation-check.result }}" == "success" ]]; then
            echo "üéâ **All checks passed!** This PR is ready for review and merge." >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ No security issues detected" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Code quality standards met" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Build and integration tests passed" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Documentation requirements satisfied" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Some checks failed.** Please review and fix the issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
